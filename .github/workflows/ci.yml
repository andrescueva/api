
name: Build Image
on:
  push:
    branches:
      - main
      - feature/**
    paths-ignore:
      - '.github/workflows/*'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: microsvc
  ECS_SERVICE: microsvc
  ECS_CLUSTER: ecs
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: microsvc

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: run unit tests
      run: |
        docker build --target test .
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image:  ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  image:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Fill in the new image ID in the Amazon ECS task definition
      run: echo ${{ needs.build.outputs.image }}


